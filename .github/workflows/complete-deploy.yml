name: Complete Deploy Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        default: '1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Bug fixes and improvements'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run tests
      run: npm test
      
    - name: Run linting
      run: npm run lint

  build-android:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 'latest'
        
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
        
    - name: Grant execute permission for gradlew
      run: chmod +x android/gradlew
      
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleRelease --stacktrace
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        
    - name: Build Android AAB
      run: |
        cd android
        ./gradlew bundleRelease --stacktrace
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: android/app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30
        
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release-aab
        path: android/app/build/outputs/bundle/release/app-release.aab
        retention-days: 30

  create-release:
    needs: build-android
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release-apk
        
    - name: Download AAB artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release-aab
        
    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: NumberOCR v${{ steps.get_version.outputs.version }}
        body: |
          ## 🎉 NumberOCR v${{ steps.get_version.outputs.version }} 릴리즈
          
          ${{ github.event.inputs.release_notes || 'Bug fixes and improvements' }}
          
          ## 📱 설치 방법
          1. APK 파일을 다운로드하세요
          2. Android 설정에서 "알 수 없는 소스"를 활성화하세요
          3. APK 파일을 설치하세요
          
          ## ✨ 주요 기능
          - 📷 카메라 기반 텍스트 인식
          - 📦 패키지 관리
          - 📋 재고 목록 관리
          - 💾 로컬 데이터 저장
          - 📤 공유 기능
          
          ## 🔧 기술 스택
          - React Native 0.80.1
          - TypeScript
          - React Navigation
          - Vision Camera
          - Text Recognition
          
          ## 📊 빌드 정보
          - **빌드 날짜**: $(date)
          - **Git 커밋**: ${{ github.sha }}
          - **브랜치**: ${{ github.ref_name }}
        draft: false
        prerelease: false
        
    - name: Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-release-unsigned.apk
        asset_name: NumberOCR-v${{ steps.get_version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload AAB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-release.aab
        asset_name: NumberOCR-v${{ steps.get_version.outputs.version }}.aab
        asset_content_type: application/octet-stream

  notify-deploy:
    needs: create-release
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Deploy Summary
      run: |
        if [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "## 🎉 배포 완료!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 NumberOCR v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **릴리즈**: ${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK 다운로드**: ${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AAB 다운로드**: ${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 빌드 상태" >> $GITHUB_STEP_SUMMARY
          echo "- 테스트: ✅ 통과" >> $GITHUB_STEP_SUMMARY
          echo "- Android 빌드: ✅ 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 릴리즈 생성: ✅ 완료" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ 배포 실패" >> $GITHUB_STEP_SUMMARY
          echo "배포 과정에서 오류가 발생했습니다." >> $GITHUB_STEP_SUMMARY
        fi 